git config --global core.editor "/usr/local/bin/vim",v
d,v
let        ,v
'SirVer/ultisnips',v
g:UltiSnipsListSnippets,v
UltiSnipsListSnippets,v
"],v
my_snippets,v
Snippets,v
/,v
", ,v
UltiSnips,v
def,V
",        ,v
        "let g:UltiSnipsExpandTrigger="<c-tab>",V
'honza/vim-snippets',v
    ""ActivateAddons vim-snippets SnipMate/        "let g:snipMate = { 'snippet_version' : 1 },V
, "$HOME/.vim/Snippets/UltiSnips/my_snippets"],v
        "let g:UltiSnipsSnippetDirectories=["UltiSnips", "my_snippets"],V
,V
" navigate words with meta+arrows    map <M-Right> <C-Right>    map <M-Left> <C-Left>,V
meta,v
 ,v
    map <M-Up> <c-w>k    map <M-Down> <c-w>j,V
windows ,v
" navigate windows with meta+arrows    map <M-Right> <c-w>l    map <M-Left> <c-w>h    map <M-Up> <c-w>k    map <M-Down> <c-w>j,V
l,v
C02YC26BJG5M,v
" ============================================================================" ----> Mappings,V
,V
plugins_settings,v
mappings ,v
    " ================  mappings file  ================     source ~/.vim/config/plugins_settings.vim,V
    " Include user's custom nvim configurations    if using_neovim        let custom_configs_path = "~/.config/nvim/custom.vim"    else        let custom_configs_path = "~/.vim/custom.vim"    endif    if filereadable(expand(custom_configs_path))      execute "source " . custom_configs_path    endif" Snippets engine    ""ActivateAddons vim-snippets SnipMate/        "let g:snipMate = { 'snippet_version' : 1 }    " Snippets engine (UltiSnips) ------------------------------        let g:UltiSnipsExpandTrigger="<tab>"        "let g:UltiSnipsExpandTrigger="<c-tab>"        let g:UltiSnipsJumpForwardTrigger="<c-b>"        let g:UltiSnipsJumpBackwardTrigger="<c-z>"        "let g:UltiSnipsSnippetDirectories=["UltiSnips", "$HOME/.vim/Snippets/UltiSnips/my_snippets"]        "let g:UltiSnipsSnippetDirectories=["UltiSnips", "my_snippets"],V
" ============================================================================" Custom configuration " Edit them as you wish.,V
,V
,V
" Custom configurations ----------------,V
    " Include user's custom nvim configurations    if using_neovim        let custom_configs_path = "~/.config/nvim/custom.vim"    else        let custom_configs_path = "~/.vim/custom.vim"    endif    if filereadable(expand(custom_configs_path))      execute "source " . custom_configs_path    endif" Snippets engine    ""ActivateAddons vim-snippets SnipMate/        "let g:snipMate = { 'snippet_version' : 1 }    " Snippets engine (UltiSnips) ------------------------------        let g:UltiSnipsExpandTrigger="<tab>"        "let g:UltiSnipsExpandTrigger="<c-tab>"        let g:UltiSnipsJumpForwardTrigger="<c-b>"        let g:UltiSnipsJumpBackwardTrigger="<c-z>"        "let g:UltiSnipsSnippetDirectories=["UltiSnips", "$HOME/.vim/Snippets/UltiSnips/my_snippets"]        "let g:UltiSnipsSnippetDirectories=["UltiSnips", "my_snippets"],V
Plugins settings and mappings,v
" ============================================================================" Plugins settings and mappings" Edit them as you wish.,V
mappings,v
    " ================  mappings file  ================     source ~/.vim/config/mappings.vim,V
" Tagbar -----------------------------    " toggle tagbar display    map <F4> :TagbarToggle<CR>    " autofocus on tagbar open    let g:tagbar_autofocus = 1" NERDTree -----------------------------    " toggle nerdtree display    map <F3> :NERDTreeToggle<CR>    " open nerdtree with the current file selected    nmap ,t :NERDTreeFind<CR>    " don;t show these file types    let NERDTreeIgnore = ['\.pyc$', '\.pyo$']    " Enable folder icons    let g:WebDevIconsUnicodeDecorateFolderNodes = 1    let g:DevIconsEnableFoldersOpenClose = 1    " Fix directory colors    highlight! link NERDTreeFlags NERDTreeDir    " Remove expandable arrow    let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""    let g:WebDevIconsUnicodeDecorateFolderNodes = v:true    let NERDTreeDirArrowExpandable = "\u00a0"    let NERDTreeDirArrowCollapsible = "\u00a0"    let NERDTreeNodeDelimiter = "\x07"    " Autorefresh on tree focus    function! NERDTreeRefresh()        if &filetype == "nerdtree"            silent exe substitute(mapcheck("R"), "<CR>", "", "")        endif    endfunction    autocmd BufEnter * call NERDTreeRefresh()" Syntastic ------------------------------    " show list of errors and warnings on the current file    nmap <leader>e :Errors<CR>    " check also when just opened the file    let g:syntastic_check_on_open = 1    " don't put icons on the sign column (it hides the vcs status icons of signify)    let g:syntastic_enable_signs = 0    " -Custom icons (enable them if you use a patched font, and enable the previous     " setting)    "let g:syntastic_error_symbol = '✗'    "let g:syntastic_warning_symbol = '⚠'    "let g:syntastic_style_error_symbol = '✗'    "let g:syntastic_style_warning_symbol = '⚠'" NERDCommenter  ------------------------------" remap toggle commenting    map <silent> <leader>c <plug>NERDCommenterToggle" Tasklist ------------------------------    " show pending tasks list    map <F2> :TaskList<CR>" Neomake ------------------------------    " Run linter on write    autocmd! BufWritePost * Neomake    " Check code as python3 by default    let g:neomake_python_python_maker = neomake#makers#ft#python#python()    let g:neomake_python_flake8_maker = neomake#makers#ft#python#flake8()    let g:neomake_python_python_maker.exe = 'python3 -m py_compile'    let g:neomake_python_flake8_maker.exe = 'python3 -m flake8'    " Disable error messages inside the buffer, next to the problematic line    let g:neomake_virtualtext_current_error = 0" Fzf ------------------------------    " file finder mapping    nmap ,e :Files<CR>    " tags (symbols) in current file finder mapping    nmap ,g :BTag<CR>    " the same, but with the word under the cursor pre filled    nmap ,wg :execute ":BTag " . expand('<cword>')<CR>    " tags (symbols) in all files finder mapping    nmap ,G :Tags<CR>    " the same, but with the word under the cursor pre filled    nmap ,wG :execute ":Tags " . expand('<cword>')<CR>    " general code finder in current file mapping    nmap ,f :BLines<CR>    " the same, but with the word under the cursor pre filled    nmap ,wf :execute ":BLines " . expand('<cword>')<CR>    " general code finder in all files mapping    nmap ,F :Lines<CR>    " the same, but with the word under the cursor pre filled    nmap ,wF :execute ":Lines " . expand('<cword>')<CR>    " commands finder mapping    nmap ,c :Commands<CR>" Deoplete -----------------------------    " Use deoplete.    let g:deoplete#enable_at_startup = 1    call deoplete#custom#option({    \   'ignore_case': v:true,    \   'smart_case': v:true,    \})    " complete with words from any opened file    let g:context_filetype#same_filetypes = {}    let g:context_filetype#same_filetypes._ = '_'" Jedi-vim ------------------------------    " Disable autocompletion (using deoplete instead)    let g:jedi#completions_enabled = 0    " All these mappings work only for python code:    " Go to definition    let g:jedi#goto_command = ',d'    " Find ocurrences    let g:jedi#usages_command = ',o'    " Find assignments    let g:jedi#goto_assignments_command = ',a'    " Go to definition in new tab    nmap ,D :tab split<CR>:call jedi#goto()<CR>" Ack.vim ------------------------------    " mappings    nmap ,r :Ack     nmap ,wr :execute ":Ack " . expand('<cword>')<CR>" Window Chooser ------------------------------    " mapping    nmap  -  <Plug>(choosewin)    " show big letters    let g:choosewin_overlay_enable = 1" Signify ------------------------------    " this first setting decides in which order try to guess your current vcs    " UPDATE it to reflect your preferences, it will speed up opening files    let g:signify_vcs_list = ['git', 'hg']    " mappings to jump to changed blocks    nmap <leader>sn <plug>(signify-next-hunk)    nmap <leader>sp <plug>(signify-prev-hunk)    " nicer colors        highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119    highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167    highlight DiffChange        cterm=bold ctermbg=none ctermfg=227    highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119    highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167    highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227" Autoclose ------------------------------    " Fix to let ESC work as espected with Autoclose plugin    " (without this, when showing an autocompletion window, ESC won't leave insert    "  mode)    let g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}" Yankring -------------------------------    if using_neovim        let g:yankring_history_dir = '~/.config/nvim/'        " Fix for yankring and neovim problem when system has non-text things        " copied in clipboard        let g:yankring_clipboard_monitor = 0    else        let g:yankring_history_dir = '~/.vim/dirs/'    endif" Airline ------------------------------    let g:airline_powerline_fonts = 0    let g:airline_theme = 'bubblegum'    let g:airline#extensions#whitespace#enabled = 0" Fancy Symbols!!    if fancy_symbols_enabled        let g:webdevicons_enable = 1        " custom airline symbols        if !exists('g:airline_symbols')           let g:airline_symbols = {}        endif        let g:airline_left_sep = ''        let g:airline_left_alt_sep = ''        let g:airline_right_sep = ''        let g:airline_right_alt_sep = ''        let g:airline_symbols.branch = '⭠'        let g:airline_symbols.readonly = '⭤'        let g:airline_symbols.linenr = '⭡'    else        let g:webdevicons_enable = 0    endif,V
" clear search results    nnoremap <silent> // :noh<CR>" -Hybrid line numbers on/off    nnoremap<silent> <leader>nu :setlocal nu! rnu!<CR>" -Spelling mistake    "  -- spanish    nnoremap<silent> <leader>es :set spell! spelllang=es<CR>    "  -- english    nnoremap<silent> <leader>en :set spell! spelllang=en_us<CR>" -Mapping Paste Mode on/off    "nnoremap <F5> :set paste <CR><ESC>    nmap <F5> :set paste<CR><ESC>    nmap <F5> :set nopaste<CR><ESC>" -Make adjusing split sizes a bit more friendly    noremap <silent> <C-Left> :vertical resize -3<CR>    noremap <silent> <C-Right> :vertical resize +3<CR>    noremap <silent> <C-Up> :resize +3<CR>    noremap <silent> <C-Down> :resize -3<CR>""" -Tab navigation mappings    "map tn :tabn<CR>    "map tp :tabp<CR>    "map tm :tabm    "map tt :tabnew    "map ts :tab split<CR>    "map <C-S-Right> :tabn<CR>    "imap <C-S-Right> <ESC>:tabn<CR>    "map <C-S-Left> :tabp<CR>    "imap <C-S-Left> <ESC>:tabp<CR>" navigate windows with meta+arrows    map <M-Right> <c-w>l    map <M-Left> <c-w>h    map <M-Up> <c-w>k    map <M-Down> <c-w>j    imap <M-Right> <ESC><c-w>l    imap <M-Left> <ESC><c-w>h    imap <M-Up> <ESC><c-w>k    imap <M-Down> <ESC><c-w>j" Quickly insert an empty new line without entering insert mode    nnoremap <silent> o :<C-u>call append(line("."),   repeat([""], v:count1))<CR>,V
" Quickly insert an empty new line without entering insert mode    nnoremap <silent> o :<C-u>call append(line("."),   repeat([""], v:count1))<CR>,V
,V
,V
settings,v
settings ,v
    " ================  settings file  ================     source ~/.vim/config/settings.vim,V
Tasklist ,v
" Tasklist ------------------------------,V
" remap toggle commenting    map <silent> <leader>c <plug>NERDCommenterToggle,V
,V
plugins ,v
    " ================   plugins file  ================ ,V
    if using_vim        " A bunch of things that are set by default in neovim, but not in vim        " no vi-compatible        set nocompatible        " allow plugins by file type (required for plugins!)        filetype plugin on        filetype indent on        " always show status bar        set ls=2        " incremental search        set incsearch        " highlighted search results        set hlsearch        " syntax highlight on        syntax on        " better backup, swap and undos storage for vim (nvim has nice ones by        " default)        set directory=~/.vim/dirs/tmp     " directory to place swap files in        set backup                        " make backup files        set backupdir=~/.vim/dirs/backups " where to put backup files        set undofile                      " persistent undos - undo after you re-open the file        set undodir=~/.vim/dirs/undos        set viminfo+=n~/.vim/dirs/viminfo        " create needed directories if they don't exist        if !isdirectory(&backupdir)            call mkdir(&backupdir, "p")        endif        if !isdirectory(&directory)            call mkdir(&directory, "p")        endif        if !isdirectory(&undodir)            call mkdir(&undodir, "p")        endif    end" tabs and spaces handling    set expandtab    set tabstop=4    set softtabstop=4    set shiftwidth=4" show line numbers    set nu" remove ugly vertical lines on window division    set fillchars+=vert:\ " use 256 colors when possible    if has('gui_running') || using_neovim || (&term =~? 'mlterm\|xterm\|xterm-256\|screen-256')        if !has('gui_running')            let &t_Co = 256        endif        let base16colorspace=256  " Access colors present in 256 colorspace        colorscheme base16-tomorrow-night-eighties        " colorscheme vim-monokai-tasty    else        let base16colorspace=256  " Access colors present in 256 colorspace        colorscheme base16-tomorrow-night-eighties        " colorscheme delek    endif" -Fold code with indentation   " some usecases:   "    za: Toggle code folding at the current line.   "    zo: open fold.   "    zc: close fold.   "    zR: open all folds.   "    zM: close all folds.   set foldmethod=indent   set nofoldenable        "so all files open unfolded"" No bell sounds    set noerrorbells    set vb t_vb=" Search down into subfolders," supports tab-completion," just use :find    set path+=**" needed so deoplete can auto select the first suggestion    set completeopt+=noinsert" comment this line to enable autocompletion preview window" (displays documentation related to the selected completion option)" disabled by default because preview makes the window flicker    set completeopt-=preview" autocompletion of files and commands behaves like shell" (complete only the common part, list the options that match)    set wildmode=list:longest" save as sudo    ca w!! w !sudo tee "%"" when scrolling, keep cursor 3 lines away from screen border    set scrolloff=3" clear empty spaces at the end of lines on save of python files    autocmd BufWritePre *.py :%s/\s\+$//e" fix problems with uncommon shells (fish, xonsh) and plugins running commands" (neomake, ...)    set shell=/bin/bash " Ability to add python breakpoints" (I use ipdb, but you can change it to whatever tool you use for debugging)    au FileType python map <silent> <leader>b Oimport ipdb; ipdb.set_trace()<esc>,V
" ============================================================================,V
if using_vim" ============================================================================,V
    source ~/.vim/config/plugins.vim,V
" Obscure hacks done, you can now modify the rest of the config down below " as you wish :),V
" Obscure hacks done, you can now modify the rest of the config down below " as you wish :),V
" IMPORTANT: some things in the config are vim or neovim specific. It's easy " to spot, they are inside `if using_vim` or `if using_neovim` blocks.,V
================ ,v
    source ~/.vim/config/plugins.vim,V
" ============================================================================" Active plugins" You can disable or add new ones here:" this needs to be here, so vim-plug knows we are declaring the plugins we" want to use    if using_neovim        call plug#begin("~/.config/nvim/plugged")    else        call plug#begin("~/.vim/plugged")    endif" Now the actual plugins:" Override configs by directory    Plug 'arielrossanigo/dir-configs-override.vim'" Code commenter    Plug 'scrooloose/nerdcommenter'" Better file browser    Plug 'scrooloose/nerdtree'" Class/module browser    Plug 'majutsushi/tagbar'" Search results counter    Plug 'vim-scripts/IndexedSearch'" A couple of nice colorschemes" Plug 'fisadev/fisa-vim-colorscheme'" Plug 'patstockwell/vim-monokai-tasty'    Plug 'chriskempson/base16-vim'" Airline    Plug 'vim-airline/vim-airline'    Plug 'vim-airline/vim-airline-themes'" Code and files fuzzy finder    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }    Plug 'junegunn/fzf.vim'" Pending tasks list    Plug 'fisadev/FixedTaskList.vim'" Async autocompletion    if using_neovim && vim_plug_just_installed        Plug 'Shougo/deoplete.nvim', {'do': ':autocmd VimEnter * UpdateRemotePlugins'}    else        Plug 'Shougo/deoplete.nvim'    endif    Plug 'roxma/nvim-yarp'    Plug 'roxma/vim-hug-neovim-rpc'" Python autocompletion    Plug 'deoplete-plugins/deoplete-jedi'" Completion from other opened files    Plug 'Shougo/context_filetype.vim'" Just to add the python go-to-definition and similar features, autocompletion" from this plugin is disabled    Plug 'davidhalter/jedi-vim'" Automatically close parenthesis, etc    Plug 'Townk/vim-autoclose'" Surround    Plug 'tpope/vim-surround'" Indent text object    Plug 'michaeljsmith/vim-indent-object'" Indentation based movements    Plug 'jeetsukumaran/vim-indentwise'" Better language packs    Plug 'sheerun/vim-polyglot'" Ack code search (requires ack installed in the system)    Plug 'mileszs/ack.vim'" Paint css colors with the real color    Plug 'lilydjwg/colorizer'" Window chooser    Plug 't9md/vim-choosewin'" Automatically sort python imports    Plug 'fisadev/vim-isort'" Highlight matching html tags    Plug 'valloric/MatchTagAlways'" Generate html in a simple way    Plug 'mattn/emmet-vim'" Git integration    Plug 'tpope/vim-fugitive'" Git/mercurial/others diff icons on the side of the file lines    Plug 'mhinz/vim-signify'" Yank history navigation    Plug 'vim-scripts/YankRing.vim'" Linters    Plug 'neomake/neomake'" Relative numbering of lines (0 is the current line)" (disabled by default because is very intrusive and can't be easily toggled" on/off. When the plugin is present, will always activate the relative" numbering every time you go to normal mode. Author refuses to add a setting" to avoid that)    Plug 'myusuf3/numbers.vim'" Nice icons in the file explorer and file type status line.    Plug 'ryanoasis/vim-devicons'    if using_vim        " Consoles as buffers (neovim has its own consoles as buffers)        Plug 'rosenfeld/conque-term'        " XML/HTML tags navigation (neovim has its own)        Plug 'vim-scripts/matchit.zip'    endif" Code searcher. If you enable it, you should also configure g:hound_base_url " and g:hound_port, pointing to your hound instance" Plug 'mattn/webapi-vim'" Plug 'jfo/hound.vim'" Tell vim-plug we finished declaring plugins, so it can load them    call plug#end()" ============================================================================" Install plugins the first time vim runs    if vim_plug_just_installed        echo "Installing Bundles, please ignore key map error messages"        :PlugInstall    endif,V
        filetype plugin on,V
filetype plugin on,v
ham-xoam-djb,v
nnore,v
<leader>ci,v
[count]|<Leader>|ci |NERDCommenterInvert|,V
|NERDCommenterInvert|,v
]<,v
count,v
[,v
" remap commenting to use /    nnoremap <silent> <leader>/ <leader>cc,V
[count]<,v
"" ,v
[count]<leader>cc,v
" mapping of commenting shortcut,V
    nnoremap <silent> <leader>/ :Commentery<CR>,V
" Plugin to toggle commenting in selected lines    Plug "tpope/vim-commentary",V
>,v
leader,v
<,v
    "nnoremap <Leader>o o<Esc>0"_D    "nnoremap <Leader>O O<Esc>0"_D,V
,V
    ,V
    nnoremap <C-<CR>> o<Esc>,V
nnoremap <silent> <leader>o :<C-u>call append(line("."),   repeat([""], v:count1))<CR,v
0"_D,v
" Quickly insert an empty new line without entering insert mode    nnoremap <Leader>o o<Esc>    nnoremap <Leader>O O<Esc>,V
    nnoremap <Leader>o o<Esc>    nnoremap <Leader>O O<Esc>,V
UltiSnips-how-snippets-are-loaded,v
var_name,v
<C-Down> ,v
def function_hol,V
" Snippets engine""ActivateAddons vim-snippets SnipMate/    "let g:snipMate = { 'snippet_version' : 1 }" Snippets engine (UltiSnips) ------------------------------    let g:UltiSnipsExpandTrigger="<tab>"    "let g:UltiSnipsExpandTrigger="<c-tab>"    let g:UltiSnipsJumpForwardTrigger="<c-b>"    let g:UltiSnipsJumpBackwardTrigger="<c-z>"    let g:UltiSnipsSnippetDirectories=["UltiSnips", "$HOME/.config/nvim/my_snippets"]    let g:UltiSnipsSnippetDirectories=["UltiSnips", "my_snippets"],V
