#!/bin/zsh

function cd_up() {
  case $1 in
    *[!0-9]*)                                          # if no a number
      cd $( pwd | sed -r "s|(.*/$1[^/]*/).*|\1|" )     # search dir_name in current path, if found - cd to it
      ;;                                               # if not found - not cd
    *)
      local d=""
      local limit="$1"
      # Default to limit of 1
      if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
          limit=1
      fi
  
      for ((i=1;i<=limit;i++)); do
          d="../$d"
      done
  
      # perform cd. Show error if cd fails
      if ! cd "$d"; then
          echo "Couldn't go up $limit dirs.";
      fi
      # cd $(printf "../" $(seq 1 $1));             # cd ../../../../  (N dirs)
    ;;
  esac
}

# compress files
compress(){
    local input="$1"
    local output="$2"

    echo "tar -czvf ${output}.tar.gz ${input}"
    tar -czvf ${output}.tar.gz ${input}
}

# decompress files
decompress(){
    input="$1"
    decompress="tar -xvf ${input}"

    echo $decompress 
    eval $decompress
}


function extract {
 if [ -z "$1" ]; then
    # Display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
 else
    for n in "$@"
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.cbr|*.rar) unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.cbz|*.epub|*.zip)
                         unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *.cpio)      cpio -id < ./"$n"  ;;
            *.cba|*.ace) unace x ./"$n"     ;;
            *)           echo "extract: '$n' - unknown archive method"
                         return 1
                         ;;
          esac
      else
          echo "'$n' - file does not exist"
          return 1
      fi
    done
fi
}



lxpdl(){
    local lxplus_file="$1"

    if [[ ! -z "$lxplus_file" ]]; then
        echo Downloading file ${lxplus_file}
        scp fsili@lxplus9.cern.ch:${lxplus_file} . 
    else
        echo "Input and output not set.";
        echo "Usage: lxpdldl <input_file>"
    fi
}


lxpup(){
    local lxplus_dir="$2"
    local file="$1"

    if [[ ! -z "$lxplus_dir" && ( -f "$file" || -d "${file}" ) ]]; then
        if [[ -f "$file" ]]; then
	    echo Uploading file ${file} to ${lxplus_dir}
            scp ${file} fsili@lxplus9.cern.ch:${lxplus_dir}/ 
	elif [[ -d "$file" ]]; then
	    echo Uploading directory ${file} to ${lxplus_dir}
            scp -r ${file} fsili@lxplus9.cern.ch:${lxplus_dir}/ 
	fi
    else
        echo "Input and output not set.";
        echo "Usage: lxpup <file> <lxplus_dir>"
    fi
}


# Download and decompress files
dldc(){
    local input="$1"
    local output="$2"
    if [[ ! -z "$input" && ! -z "$output" ]]; then
        echo Downloading file ${input}.tar.gz into ${output}.tar.gz
        scp fsili@lxplus.cern.ch:${input}.tar.gz ${output}.tar.gz 
        echo Decompressing file ${output}.tar.gz
        #tar -xvf ${output}.tar.gz -C ${output} 
        decompress ${output}.tar.gz
    else
        echo "Input and output not set.";
        echo "Usage: dldc <input_file>.tar.gz <output_file>.tar.gz"
    fi
}

# Connect to lxplus
lxp(){
   local server="$1"
   local user="fsili"
   if [[ ! -z "$server" ]]; then
       ssh ${user}@lxplus${server}.cern.ch
   else
       ssh ${user}@lxplus9.cern.ch
   fi 
}


# Connect to iflp condor cluster 
iflp(){
   ssh fsili@163.10.100.39
}



# Get a list of last lxplus sessions
llxp(){
    ssh fsili@lxplus9.cern.ch "tail .lasthost.log"
}







